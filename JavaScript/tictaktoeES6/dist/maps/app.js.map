{"version":3,"sources":["Board.js","Game.js","Main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["'use strict';\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.boardEl = document.querySelector('.grid-container');\r\n        this.message = document.querySelector('.message');\r\n    }\r\n\r\n    /**\r\n     * Отрисовка поля\r\n     */\r\n    renderBoard() {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                let div = document.createElement('div');\r\n                div.classList.add('grid-item');\r\n                div.setAttribute('data-x', `${j}`);\r\n                div.setAttribute(`data-y`, `${i}`);\r\n                this.boardEl.append(div);\r\n            }\r\n        }\r\n    }\r\n}","'use strict';\r\n\r\nclass Game {\r\n    constructor() {\r\n        this.currPlayer = 'X';\r\n        this.cells = [\r\n            [\"\", \"\", \"\"],\r\n            [\"\", \"\", \"\"],\r\n            [\"\", \"\", \"\"],\r\n        ];\r\n        this.status = 'playing';\r\n    }\r\n\r\n    /**\r\n     * Инициируем игру, принмаем необходимы объекты\r\n     * @param {object} board \r\n     */\r\n    init(board) {\r\n        this.board = board;\r\n        this.message = board.message;\r\n        this.gridElems = document.querySelectorAll('.grid-item');\r\n    }\r\n\r\n    /**\r\n     * Запуск игры\r\n     */\r\n    run() {\r\n        this.gridElems.forEach(gridEl => {\r\n            gridEl.addEventListener('click', this.addClickListeners.bind(this));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод назначаемый в качестве обработчика события при килике по ячейке\r\n     * @param {object} event \r\n     */\r\n    addClickListeners(event) {\r\n        if (this.status === 'playing') {\r\n            this.addItemInCell(event);\r\n            this.addItemInCellArr(event);\r\n\r\n            if (this.isGameWon()) {\r\n                this.setWonMessage();\r\n                this.status = 'stop';\r\n            }\r\n\r\n            if (this.isGameDraw()) {\r\n                this.setDrawMessage();\r\n                this.status = 'stop';\r\n            }\r\n\r\n            this.changerCurrPlayer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод вставляет в ячейку крестик или нолик\r\n     * @param {object} event \r\n     */\r\n    addItemInCell(event) {\r\n        if (event.target.innerText === \"\") {\r\n            event.target.innerText = this.currPlayer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод помещает текущий символ (крестик или нолик) в массив\r\n     * @param {object} event \r\n     */\r\n    addItemInCellArr(event) {\r\n        let x = +event.target.getAttribute('data-x');\r\n        let y = +event.target.getAttribute('data-y');\r\n        let symbol = event.target.innerText;\r\n        this.cells[y][x] = symbol;\r\n    }\r\n\r\n    /**\r\n     * Метод проводит проверку на победу\r\n     * @returns {boolean}\r\n     */\r\n    isGameWon() {\r\n        return this.isLineWon({y: 0, x: 0}, {y: 0, x: 1}, {y: 0, x: 2}) ||\r\n               this.isLineWon({y: 1, x: 0}, {y: 1, x: 1}, {y: 1, x: 2}) ||\r\n               this.isLineWon({y: 2, x: 0}, {y: 2, x: 1}, {y: 2, x: 2}) ||\r\n               this.isLineWon({y: 0, x: 0}, {y: 1, x: 1}, {y: 2, x: 2}) ||\r\n               this.isLineWon({y: 0, x: 2}, {y: 1, x: 1}, {y: 2, x: 0}) ||\r\n               this.isLineWon({y: 0, x: 0}, {y: 1, x: 0}, {y: 2, x: 0}) ||\r\n               this.isLineWon({y: 0, x: 1}, {y: 1, x: 1}, {y: 2, x: 1}) ||\r\n               this.isLineWon({y: 0, x: 2}, {y: 1, x: 2}, {y: 2, x: 2});\r\n    }\r\n\r\n    /**\r\n     * Метод проводит проверку на ничью\r\n     * @returns {boolean}\r\n     */\r\n    isGameDraw() {\r\n        let full = true;\r\n\r\n        this.cells.forEach(elem => {\r\n            elem.forEach(item => {\r\n                if (item === \"\") {\r\n                    full = false;\r\n                }\r\n            });\r\n        });\r\n\r\n        return full;\r\n    }\r\n\r\n    /**\r\n     * Метод проводит проверку победных комбинаций\r\n     * @returns {boolean}\r\n     */\r\n    isLineWon(a, b, c) {\r\n        let value = this.cells[a.y][a.x] + this.cells[b.y][b.x] + this.cells[c.y][c.x];\r\n        return value === \"XXX\" || value === \"OOO\";\r\n    }\r\n\r\n\r\n    /**\r\n     * Метод меняет игрока с крестика на нолик или наоборот\r\n     */\r\n    changerCurrPlayer() {\r\n        this.currPlayer === 'X'? this.currPlayer = 'O' : this.currPlayer = 'X';\r\n    }\r\n\r\n    /**\r\n     * Метод выводит сообщение о победе текущего игрока\r\n     */\r\n    setWonMessage() {\r\n        if (this.currPlayer === 'X') {\r\n            this.message.innerText = `Победили крестики`;\r\n        } else {\r\n            this.message.innerText = `Победили нолики`;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Метод выводит сообщение о ничьей\r\n     */\r\n    setDrawMessage() {\r\n        this.message.innerText = `Ничья! :(`;\r\n    }\r\n}","'use strict';\r\n\r\nwindow.addEventListener('load', () => {\r\n    const board = new Board();\r\n    const game = new Game();\r\n\r\n    board.renderBoard();\r\n    game.init(board);\r\n    game.run();\r\n})"]}